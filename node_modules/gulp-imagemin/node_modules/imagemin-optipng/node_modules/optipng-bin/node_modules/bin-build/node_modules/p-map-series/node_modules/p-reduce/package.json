{
  "name": "p-reduce",
  "version": "1.0.0",
  "description": "Reduce a list of values using promises into a promise for a value",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "sindresorhus/p-reduce"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "engines": {
    "node": ">=4"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "promise",
    "reduce",
    "collection",
    "iterable",
    "iterator",
    "async",
    "await",
    "promises",
    "accumulate",
    "bluebird"
  ],
  "devDependencies": {
    "ava": "*",
    "delay": "^1.3.1",
    "xo": "*"
  },
  "xo": {
    "esnext": true
  },
  "readme": "# p-reduce [![Build Status](https://travis-ci.org/sindresorhus/p-reduce.svg?branch=master)](https://travis-ci.org/sindresorhus/p-reduce)\n\n> Reduce a list of values using promises into a promise for a value\n\nUseful when you need to calculate some accumulated value based on async resources.\n\n\n## Install\n\n```\n$ npm install --save p-reduce\n```\n\n\n## Usage\n\n```js\nconst pReduce = require('p-reduce');\nconst humanInfo = require('human-info'); // not a real module\n\nconst names = [\n\tgetUser('sindresorhus').then(info => info.name),\n\t'Addy Osmani',\n\t'Pascal Hartig',\n\t'Stephen Sawchuk'\n];\n\npReduce(names, (total, name) => {\n\treturn humanInfo(name).then(info => total + info.age);\n}, 0).then(totalAge => {\n\tconsole.log(totalAge);\n\t//=> 125\n});\n```\n\n\n## API\n\n### pReduce(input, reducer, [initialValue])\n\nReturns a `Promise` that is fulfilled when all promises in `input` and ones returned from `reducer` are fulfilled, or rejects if any of the promises reject. The fulfilled value is the result of the reduction.\n\n#### input\n\nType: `Iterable<Promise|any>`\n\nIterated over serially in the `reducer` function.\n\n#### reducer(previousValue, currentValue, index)\n\nType: `Function`\n\nExpected to return a value. If a `Promise` is returned, it's awaited before continuing with the next iteration.\n\n#### initialValue\n\nType: `any`\n\nValue to use as `previousValue` in the first `reducer` invocation.\n\n\n## Related\n\n- [p-each-series](https://github.com/sindresorhus/p-each-series) - Iterate over promises serially\n- [p-map-series](https://github.com/sindresorhus/p-map-series) - Map over promises serially\n- [p-map](https://github.com/sindresorhus/p-map) - Map over promises concurrently\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "_id": "p-reduce@1.0.0",
  "_from": "p-reduce@^1.0.0"
}
