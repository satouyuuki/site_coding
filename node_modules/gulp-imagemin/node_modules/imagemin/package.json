{
  "name": "imagemin",
  "version": "6.1.0",
  "description": "Minify images",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "imagemin/imagemin"
  },
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "minify",
    "compress",
    "image",
    "images",
    "jpeg",
    "jpg",
    "png",
    "gif",
    "svg"
  ],
  "dependencies": {
    "file-type": "^10.7.0",
    "globby": "^8.0.1",
    "make-dir": "^1.0.0",
    "p-pipe": "^1.1.0",
    "pify": "^4.0.1",
    "replace-ext": "^1.0.0"
  },
  "devDependencies": {
    "ava": "^1.0.1",
    "del": "^3.0.0",
    "imagemin-jpegtran": "^6.0.0",
    "imagemin-svgo": "^7.0.0",
    "imagemin-webp": "^5.0.0",
    "is-jpg": "^2.0.0",
    "tempy": "^0.2.1",
    "xo": "^0.23.0"
  },
  "readme": "# imagemin [![Build Status](https://travis-ci.org/imagemin/imagemin.svg?branch=master)](https://travis-ci.org/imagemin/imagemin) [![Build status](https://ci.appveyor.com/api/projects/status/wlnem7wef63k4n1t?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/imagemin)\n\n> Minify images seamlessly\n\n\n## Install\n\n```\n$ npm install imagemin\n```\n\n\n## Usage\n\n```js\nconst imagemin = require('imagemin');\nconst imageminJpegtran = require('imagemin-jpegtran');\nconst imageminPngquant = require('imagemin-pngquant');\n\n(async () => {\n\tconst files = await imagemin(['images/*.{jpg,png}'], 'build/images', {\n\t\tplugins: [\n\t\t\timageminJpegtran(),\n\t\t\timageminPngquant({quality: '65-80'})\n\t\t]\n\t});\n\n\tconsole.log(files);\n\t//=> [{data: <Buffer 89 50 4e …>, path: 'build/images/foo.jpg'}, …]\n})();\n```\n\n\n## API\n\n### imagemin(input, [output], [options])\n\nReturns `Promise<Object[]>` in the format `{data: Buffer, path: string}`.\n\n#### input\n\nType: `string[]`\n\nFiles to be optimized. See supported `minimatch` [patterns](https://github.com/isaacs/minimatch#usage).\n\n#### output\n\nType: `string`\n\nSet the destination folder to where your files will be written. If no destination is specified no files will be written.\n\n#### options\n\nType: `Object`\n\n##### plugins\n\nType: `Array`\n\n[Plugins](https://www.npmjs.com/browse/keyword/imageminplugin) to use.\n\n### imagemin.buffer(buffer, [options])\n\nReturns `Promise<Buffer>`.\n\n#### buffer\n\nType: `Buffer`\n\nBuffer to optimize.\n\n#### options\n\nType: `Object`\n\n##### plugins\n\nType: `Array`\n\n[Plugins](https://www.npmjs.com/browse/keyword/imageminplugin) to use.\n\n\n## Related\n\n- [imagemin-cli](https://github.com/imagemin/imagemin-cli) - CLI for this module\n- [imagemin-app](https://github.com/imagemin/imagemin-app) - GUI app for this module\n- [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) - Gulp plugin\n- [grunt-contrib-imagemin](https://github.com/gruntjs/grunt-contrib-imagemin) - Grunt plugin\n\n\n## License\n\nMIT © [imagemin](https://github.com/imagemin)\n",
  "readmeFilename": "readme.md",
  "_id": "imagemin@6.1.0",
  "_from": "imagemin@^6.0.0"
}
