{
  "name": "imagemin-pngquant",
  "version": "7.0.0",
  "description": "Imagemin plugin for `pngquant`",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "imagemin/imagemin-pngquant"
  },
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "test": "xo && ava && tsd-check"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "keywords": [
    "compress",
    "image",
    "imageminplugin",
    "img",
    "minify",
    "optimize",
    "png",
    "pngquant"
  ],
  "dependencies": {
    "execa": "^1.0.0",
    "is-png": "^1.0.0",
    "is-stream": "^1.1.0",
    "ow": "^0.8.0",
    "pngquant-bin": "^5.0.0"
  },
  "devDependencies": {
    "@types/node": "^10.12.18",
    "ava": "^1.0.1",
    "get-stream": "^4.1.0",
    "tsd-check": "^0.3.0",
    "xo": "^0.23.0"
  },
  "readme": "# imagemin-pngquant [![Build Status](https://travis-ci.org/imagemin/imagemin-pngquant.svg?branch=master)](https://travis-ci.org/imagemin/imagemin-pngquant) [![Build status](https://ci.appveyor.com/api/projects/status/w60auppnbiwgu9gj?svg=true)](https://ci.appveyor.com/project/kevva/imagemin-pngquant)\n\n> [Imagemin](https://github.com/imagemin/imagemin) plugin for [`pngquant`](https://github.com/kornelski/pngquant)\n\n\n## Install\n\n```\n$ npm install imagemin-pngquant\n```\n\n\n## Usage\n\n```js\nconst imagemin = require('imagemin');\nconst imageminPngquant = require('imagemin-pngquant');\n\n(async () => {\n\tawait imagemin(['images/*.png'], 'build/images', {\n\t\tplugins: [\n\t\t\timageminPngquant()\n\t\t]\n\t});\n\n\tconsole.log('Images optimized');\n})();\n```\n\n\n## API\n\n### imageminPngquant([options])(input)\n\nReturns a `Promise` for a `Buffer`.\n\n#### options\n\nType: `Object`\n\n##### speed\n\nType: `number`<br>\nDefault: `3`<br>\nValues: `1` (brute-force) to `11` (fastest)\n\nSpeed `10` has 5% lower quality, but is about 8 times faster than the default. Speed `11` disables dithering and lowers compression level.\n\n##### strip\n\nType: `boolean`<br>\nDefault: `false`\n\nRemove optional metadata.\n\n##### quality\n\nType: `Array<min: number, max: number>`<br>\nValues: `Array<0...1, 0...1>`<br>\nExample: `[0.3, 0.5]`\n\nInstructs pngquant to use the least amount of colors required to meet or exceed\nthe max quality. If conversion results in quality below the min quality the\nimage won't be saved.\n\nMin and max are numbers in range 0 (worst) to 1 (perfect), similar to JPEG.\n\n##### dithering\n\nType: `number` `boolean`<br>\nDefault: `1` (full)<br>\nValues: `0...1`\n\nSet the dithering level using a fractional number between 0 (none) and 1 (full).\n\nPass in `false` to disable dithering.\n\n##### posterize\n\nType: `number`\n\nTruncate number of least significant bits of color (per channel). Use this when image will be output on low-depth displays (e.g. 16-bit RGB). pngquant will make almost-opaque pixels fully opaque and will reduce amount of semi-transparent colors.\n\n##### verbose\n\nType: `boolean`<br>\nDefault: `false`\n\nPrint verbose status messages.\n\n#### input\n\nType: `Buffer` `Stream`\n\nBuffer or stream to optimize.\n\n\n## License\n\nMIT Â© [Imagemin](https://github.com/imagemin)\n",
  "readmeFilename": "readme.md",
  "_id": "imagemin-pngquant@7.0.0",
  "_from": "imagemin-pngquant@"
}
