{
  "name": "p-map-series",
  "version": "1.0.0",
  "description": "Map over promises serially",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "sindresorhus/p-map-series"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "engines": {
    "node": ">=4"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "promise",
    "map",
    "collection",
    "iterable",
    "iterator",
    "fulfilled",
    "serial",
    "serially",
    "async",
    "await",
    "promises",
    "bluebird"
  ],
  "dependencies": {
    "p-reduce": "^1.0.0"
  },
  "devDependencies": {
    "ava": "*",
    "delay": "^1.3.1",
    "time-span": "^1.0.0",
    "xo": "*"
  },
  "xo": {
    "esnext": true
  },
  "readme": "# p-map-series [![Build Status](https://travis-ci.org/sindresorhus/p-map-series.svg?branch=master)](https://travis-ci.org/sindresorhus/p-map-series)\n\n> Map over promises serially\n\nUseful as a side-effect mapper. Use [`p-map`](https://github.com/sindresorhus/p-map) if you don't need side-effects, as it's concurrent.\n\n\n## Install\n\n```\n$ npm install --save p-map-series\n```\n\n\n## Usage\n\n```js\nconst pMapSeries = require('p-map-series');\n\nconst keywords = [\n\tgetTopKeyword() //=> Promise\n\t'rainbow',\n\t'pony'\n];\n\nlet scores = [];\n\nconst mapper = keyword => fetchScore(keyword).then(score => {\n\tscores.push(score);\n\treturn {keyword, score};\n});\n\npMapSeries(keywords, mapper).then(result => {\n\tconsole.log(result);\n\t/*\n\t[{\n\t\tkeyword: 'unicorn',\n\t\tscore: 99\n\t}, {\n\t\tkeyword: 'rainbow',\n\t\tscore: 70\n\t}, {\n\t\tkeyword: 'pony',\n\t\tscore: 79}\n\t]\n\t*/\n});\n```\n\n\n## API\n\n### pMapSeries(input, mapper)\n\nReturns a `Promise` that is fulfilled when all promises in `input` and ones returned from `mapper` are fulfilled, or rejects if any of the promises reject. The fulfilled value is an `Array` of the `mapper` created promises fulfillment values.\n\n#### input\n\nType: `Iterable<Promise|any>`\n\nMapped over serially in the `mapper` function.\n\n#### mapper(element, index)\n\nType: `Function`\n\nExpected to return a value. If it's a `Promise`, it's awaited before continuing with the next iteration.\n\n\n## Related\n\n- [p-each-series](https://github.com/sindresorhus/p-each-series) - Iterate over promises serially\n- [p-reduce](https://github.com/sindresorhus/p-reduce) - Reduce a list of values using promises into a promise for a value\n- [p-map](https://github.com/sindresorhus/p-map) - Map over promises concurrently\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "_id": "p-map-series@1.0.0",
  "_from": "p-map-series@^1.0.0"
}
