{
  "name": "parse-node-version",
  "version": "1.0.1",
  "description": "Turn node's process.version into something useful.",
  "author": {
    "name": "Gulp Team",
    "email": "team@gulpjs.com",
    "url": "http://gulpjs.com/"
  },
  "contributors": [
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "gulpjs/parse-node-version"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.10"
  },
  "main": "index.js",
  "files": [
    "LICENSE",
    "index.js"
  ],
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha --async-only",
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls"
  },
  "dependencies": {},
  "devDependencies": {
    "eslint": "^2.13.0",
    "eslint-config-gulp": "^3.0.1",
    "expect": "^1.20.2",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "^3.5.3"
  },
  "keywords": [
    "process.version",
    "node version",
    "version parse"
  ],
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# parse-node-version\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nTurn node's process.version into something useful.\n\n## Usage\n\n```js\nvar nodeVersion = require('parse-node-version')(process.version);\n\nconsole.log(\n  nodeVersion.major,\n  nodeVersion.minor,\n  nodeVersion.patch,\n  nodeVersion.pre,\n  nodeVersion.build\n);\n```\n\n## API\n\n### parseVersion(nodeVersionString)\n\nTakes a node version string (usually `process.version`) and returns an object with the `major`/`minor`/`patch` (which will all be numbers) and `pre`/`build` keys (which will always be a string). If the version doesn't contain any pre-release or build information, the properties will be returned as empty string.\n\n## License\n\nMIT\n\n[downloads-image]: http://img.shields.io/npm/dm/parse-node-version.svg\n[npm-url]: https://www.npmjs.com/package/parse-node-version\n[npm-image]: http://img.shields.io/npm/v/parse-node-version.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/parse-node-version\n[travis-image]: http://img.shields.io/travis/gulpjs/parse-node-version.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/parse-node-version\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/parse-node-version.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/parse-node-version\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/parse-node-version/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
  "readmeFilename": "README.md",
  "_id": "parse-node-version@1.0.1",
  "_from": "parse-node-version@^1.0.0"
}
