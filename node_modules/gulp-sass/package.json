{
  "name": "gulp-sass",
  "version": "4.0.2",
  "description": "Gulp plugin for sass",
  "main": "index.js",
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dlmanning/gulp-sass"
  },
  "keywords": [
    "gulpplugin",
    "sass",
    "gulp"
  ],
  "author": {
    "name": "David Manning"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dlmanning/gulp-sass/issues"
  },
  "dependencies": {
    "chalk": "^2.3.0",
    "lodash.clonedeep": "^4.3.2",
    "node-sass": "^4.8.3",
    "plugin-error": "^1.0.1",
    "replace-ext": "^1.0.0",
    "strip-ansi": "^4.0.0",
    "through2": "^2.0.0",
    "vinyl-sourcemaps-apply": "^0.2.0"
  },
  "devDependencies": {
    "autoprefixer": "^8.1.0",
    "eslint": "^4.18.2",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-plugin-import": "^2.9.0",
    "globule": "^1.0.0",
    "gulp": "^3.8.11",
    "gulp-postcss": "^7.0.1",
    "gulp-sourcemaps": "^2.6.4",
    "gulp-tap": "^0.1.3",
    "mocha": "^5.0.4",
    "rimraf": "^2.4.3",
    "should": "^13.2.1",
    "vinyl": "^2.1.0"
  },
  "readme": "# gulp-sass [![Build Status](https://travis-ci.org/dlmanning/gulp-sass.svg?branch=master)](https://travis-ci.org/dlmanning/gulp-sass) [![Join the chat at https://gitter.im/dlmanning/gulp-sass](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dlmanning/gulp-sass?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![npm version](https://badge.fury.io/js/gulp-sass.svg)](http://badge.fury.io/js/gulp-sass)\n\nSass plugin for [Gulp](https://github.com/gulpjs/gulp).\n\n**_Before filing an issue, please make sure you have [Updated to the latest Gulp Sass](https://github.com/dlmanning/gulp-sass/wiki/Update-to-the-latest-Gulp-Sass) and have gone through our [Common Issues and Their Fixes](https://github.com/dlmanning/gulp-sass/wiki/Common-Issues-and-Their-Fixes) section._**\n\n# Support\n\nOnly [Active LTS and Current releases][1] are supported.\n\n[1]: https://github.com/nodejs/Release#release-schedule\n\n# Install\n\n```\nnpm install node-sass gulp-sass --save-dev\n```\n\n# Basic Usage\n\nSomething like this will compile your Sass files:\n\n```javascript\n'use strict';\n\nvar gulp = require('gulp');\nvar sass = require('gulp-sass');\n\nsass.compiler = require('node-sass');\n\ngulp.task('sass', function () {\n  return gulp.src('./sass/**/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(gulp.dest('./css'));\n});\n\ngulp.task('sass:watch', function () {\n  gulp.watch('./sass/**/*.scss', ['sass']);\n});\n```\n\nYou can also compile synchronously, doing something like this:\n\n```javascript\n'use strict';\n\nvar gulp = require('gulp');\nvar sass = require('gulp-sass');\n\nsass.compiler = require('node-sass');\n\ngulp.task('sass', function () {\n  return gulp.src('./sass/**/*.scss')\n    .pipe(sass.sync().on('error', sass.logError))\n    .pipe(gulp.dest('./css'));\n});\n\ngulp.task('sass:watch', function () {\n  gulp.watch('./sass/**/*.scss', ['sass']);\n});\n```\n\nYou can choose whether to use [Dart Sass][] or [Node Sass][] by setting the `sass.compiler` property. Node Sass will be used by default, but it's strongly recommended that you set it explicitly for forwards-compatibility in case the default ever changes.\n\n[Dart Sass]: http://sass-lang.com/dart-sass\n[Node Sass]: https://github.com/sass/node-sass\n\nNote that when using Dart Sass, **synchronous compilation is twice as fast as asynchronous compilation** by default, due to the overhead of asynchronous callbacks. To avoid this overhead, you can use the [`fibers`](https://www.npmjs.com/package/fibers) package to call asynchronous importers from the synchronous code path. To enable this, pass the `Fiber` class to the `fiber` option:\n\n```javascript\n'use strict';\n\nvar Fiber = require('fibers');\nvar gulp = require('gulp');\nvar sass = require('gulp-sass');\n\nsass.compiler = require('sass');\n\ngulp.task('sass', function () {\n  return gulp.src('./sass/**/*.scss')\n    .pipe(sass({fiber: Fiber}).on('error', sass.logError))\n    .pipe(gulp.dest('./css'));\n});\n\ngulp.task('sass:watch', function () {\n  gulp.watch('./sass/**/*.scss', ['sass']);\n});\n```\n\n## Options\n\nPass in options just like you would for [Node Sass](https://github.com/sass/node-sass#options); they will be passed along just as if you were using Node Sass. Except for the `data` option which is used by gulp-sass internally. Using the `file` option is also unsupported and results in undefined behaviour that may change without notice.\n\nFor example:\n\n```javascript\ngulp.task('sass', function () {\n return gulp.src('./sass/**/*.scss')\n   .pipe(sass({outputStyle: 'compressed'}).on('error', sass.logError))\n   .pipe(gulp.dest('./css'));\n});\n```\n\nOr this for synchronous code:\n\n```javascript\ngulp.task('sass', function () {\n return gulp.src('./sass/**/*.scss')\n   .pipe(sass.sync({outputStyle: 'compressed'}).on('error', sass.logError))\n   .pipe(gulp.dest('./css'));\n});\n```\n\n## Source Maps\n\n`gulp-sass` can be used in tandem with [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) to generate source maps for the Sass to CSS compilation. You will need to initialize [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) prior to running `gulp-sass` and write the source maps after.\n\n```javascript\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('sass', function () {\n return gulp.src('./sass/**/*.scss')\n  .pipe(sourcemaps.init())\n  .pipe(sass().on('error', sass.logError))\n  .pipe(sourcemaps.write())\n  .pipe(gulp.dest('./css'));\n});\n```\n\nBy default, [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) writes the source maps inline in the compiled CSS files. To write them to a separate file, specify a path relative to the `gulp.dest()` destination in the `sourcemaps.write()` function.\n\n```javascript\nvar sourcemaps = require('gulp-sourcemaps');\ngulp.task('sass', function () {\n return gulp.src('./sass/**/*.scss')\n  .pipe(sourcemaps.init())\n  .pipe(sass().on('error', sass.logError))\n  .pipe(sourcemaps.write('./maps'))\n  .pipe(gulp.dest('./css'));\n});\n```\n\n# Issues\n\n`gulp-sass` is a very light-weight wrapper around either [Dart Sass][] or [Node Sass][] (which in turn is a Node binding for [LibSass][]). Because of this, the issue you're having likely isn't a `gulp-sass` issue, but an issue with one those projects or with [Sass][] as a whole.\n\n[LibSass]: https://sass-lang.com/libsass\n[Sass]: https://sass-lang.com\n\nIf you have a feature request/question how Sass works/concerns on how your Sass gets compiled/errors in your compiling, it's likely a Dart Sass or LibSass issue and you should file your issue with one of those projects.\n\nIf you're having problems with the options you're passing in, it's likely a Dart Sass or Node Sass issue and you should file your issue with one of those projects.\n\nWe may, in the course of resolving issues, direct you to one of these other projects. If we do so, please follow up by searching that project's issue queue (both open and closed) for your problem and, if it doesn't exist, filing an issue with them.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-sass@4.0.2",
  "dist": {
    "shasum": "9a89d29f760898a426818839fb7d06e993b2f758"
  },
  "_from": "gulp-sass@",
  "_resolved": "https://registry.npmjs.org/gulp-sass/-/gulp-sass-4.0.2.tgz"
}
